/*
 *  Copyright (C) 2015 Daniel H. Huson
 *
 *  (Some files contain contributions from other authors, who are then mentioned separately.)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package megan.biom.biom2;

import ch.systemsx.cisd.hdf5.HDF5Factory;
import ch.systemsx.cisd.hdf5.IHDF5Reader;
import jloda.util.Basic;
import jloda.util.ProgramProperties;
import megan.classification.Classification;
import megan.classification.IdMapper;
import megan.core.ClassificationType;
import megan.core.DataTable;
import megan.core.Document;
import megan.core.MeganFile;
import megan.fx.NotificationsInSwing;
import megan.parsers.blast.BlastMode;
import megan.util.BiomFileFilter;
import megan.viewer.MainViewer;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * parses a file in biom format
 * Daniel Huson, 9.2012
 */
public class Biom2Importer {
    /**
     * apply the biom2 importer to the given file
     *
     * @param fileName
     * @param doc
     * @param type
     */
    static public void apply(String fileName, Document doc, String type, boolean ignorePathAbove) throws IOException {
        if (!BiomFileFilter.isBiom2File(fileName)) {
            throw new IOException("File not in BIOM2 format");
        }

        System.err.println("Importing data from BIOM2 file");
        try (IHDF5Reader reader = HDF5Factory.openForReading(fileName)) {
            final TopLevelAttributes topLevelAttributes = new TopLevelAttributes(reader);
            System.err.println(topLevelAttributes.toString());

            final String[] sampleIds = reader.readStringArray("/sample/ids"); // dataset of the sample IDs
            final int numberOfSamples = sampleIds.length;

            final Map<Integer, float[]> class2sample2count;
            final String classificationName;

            if (TopLevelAttributes.Type.OTU_table.equalsName(topLevelAttributes.getType())) {
                class2sample2count = ImportBiom2Taxonomy.getClass2Samples2Counts(reader, numberOfSamples, ignorePathAbove);
                classificationName = Classification.Taxonomy;
            } else {
                throw new IOException("Import of type '" + topLevelAttributes.getType() + "' not implemented: please request implementation here: http://megan.informatik.uni-tuebingen.de");
            }
            System.err.println("Classification type is: " + classificationName);

            final DataTable datatTable = doc.getDataTable();
            datatTable.clear();
            datatTable.setCreator(ProgramProperties.getProgramName());
            datatTable.setCreationDate((new Date()).toString());

            final float[] sizes = computeSizes(numberOfSamples, class2sample2count);
            final float totalReads = Basic.getSum(sizes);

            doc.getActiveViewers().add(classificationName);
            doc.getMeganFile().setFileType(MeganFile.Type.MEGAN_SUMMARY_FILE);

            datatTable.getClassification2Class2Counts().put(classificationName, class2sample2count);

            if (!classificationName.equals(ClassificationType.Taxonomy.toString())) {
                final Map<Integer, float[]> class2counts = new HashMap<>();
                class2counts.put(IdMapper.UNASSIGNED_ID, sizes);
                datatTable.getClassification2Class2Counts().put(ClassificationType.Taxonomy.toString(), class2counts);
            }

            datatTable.setSamples(sampleIds, null, sizes, new BlastMode[]{BlastMode.Classifier});
            datatTable.setTotalReads(Math.round(totalReads));
            doc.setNumberReads(Math.round(totalReads));

            // read the meta data, if available:
            Biom2MetaData.read(reader, sampleIds, doc.getSampleAttributeTable());

            System.err.println("done (" + totalReads + " reads)");

            NotificationsInSwing.showInformation(MainViewer.getLastActiveFrame(), "Imported " + totalReads + " reads, as " + classificationName + " classification"
                    + "\nGenerated by " + topLevelAttributes.getGeneratedBy()
                    + ", date: " + topLevelAttributes.getCreationDate());
        }
    }

    /**
     * determines the total sample sizes
     *
     * @param numberOfSamples
     * @param class2sample2count
     * @return sample sizes
     */
    private static float[] computeSizes(int numberOfSamples, Map<Integer, float[]> class2sample2count) {
        final float[] sizes = new float[numberOfSamples];
        for (float[] array : class2sample2count.values()) {
            for (int i = 0; i < array.length; i++) {
                sizes[i] += array[i];
            }
        }
        return sizes;
    }

    /**
     * get the entry, if it exists, otherwise create it and initialize to zeros
     *
     * @param map
     * @param id
     * @param size
     * @return entry
     */
    private static Integer[] getOrCreate(Map<Integer, Integer[]> map, Integer id, int size) {
        Integer[] result = map.get(id);
        if (result == null) {
            result = newZeroedIntegerArray(size);
            map.put(id, result);
        }
        return result;
    }

    /**
     * add all values to sum
     *
     * @param sum
     * @param add
     */
    private static void addToArray(Integer[] sum, int[] add) {
        for (int i = 0; i < add.length; i++) {
            sum[i] += add[i];
        }
    }

    /**
     * create new array with zero entries
     *
     * @param size
     * @return new array
     */
    private static Integer[] newZeroedIntegerArray(int size) {
        Integer[] result = new Integer[size];
        for (int i = 0; i < size; i++)
            result[i] = 0;
        return result;
    }
}
